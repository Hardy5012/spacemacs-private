;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(better-defaults
     osx

     version-control
     git

     syntax-checking
     auto-completion
     shell

     lua
     emacs-lisp
     markdown
     org
     (react :variables
            js2-basic-offset 2
            css-indent-offset 2
            web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-attr-indent-offset 2)
     clojure
     swift
     ess

     (wakatime :variables
               wakatime-api-key "6d156eab-750c-4db1-8cc9-ea12c1d006a0"
               wakatime-cli-path "/usr/local/bin/wakatime")

     nikki93)
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(cyberpunk-theme)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  (setq-default
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '(recents projects)
   dotspacemacs-themes '(
                         spacemacs-dark
                         cyberpunk
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         monokai
                         zenburn
                         )
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font (if (eq system-type 'windows-nt)
                                 '("Source Code Pro"
                                   :size 12
                                   :weight normal
                                   :width normal
                                   :powerline-scale 1.1)
                               '("Menlo"
                                 :size 11
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.1))
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ";"
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-use-ido nil
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native t
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 0
   dotspacemacs-inactive-transparency 0
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil))


(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."
  (setq powerline-default-separator nil)

  ;; Transparency!
  ;; (let ((transparency 85))
  ;;   (set-frame-parameter (selected-frame) 'alpha `(,transparency ,transparency))
  ;;   (add-to-list 'default-frame-alist `(alpha ,transparency ,transparency)))

  ;; Reverse colors for the border to have nicer line
  (set-face-inverse-video-p 'vertical-border nil)
  (set-face-background 'vertical-border (face-background 'default))

  ;; Set symbol for the border
  (set-display-table-slot standard-display-table
                          'vertical-border
                          (make-glyph-code ?â”ƒ))

  (set-frame-parameter (selected-frame) 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))

  (when (eq system-type 'windows-nt)
    (setq w32-lwindow-modifier 'hyper)
    (global-set-key (kbd "H-1") 'select-window-1)
    (global-set-key (kbd "H-2") 'select-window-2)
    (global-set-key (kbd "H-3") 'select-window-3)
    (global-set-key (kbd "H-4") 'select-window-4)
    (global-set-key (kbd "H-5") 'select-window-5)
    (global-set-key (kbd "H-6") 'select-window-6)
    (global-set-key (kbd "H-7") 'select-window-7))
  (global-set-key (kbd "M-o") 'other-frame)

  (setq-default fill-column 80)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode)))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   (quote
    ((eval setq nikki93/exponent-scratch-path
           (expand-file-name "./repl/scratch.js"
                             (file-name-directory
                              (let
                                  ((d
                                    (dir-locals-find-file ".")))
                                (if
                                    (stringp d)
                                    d
                                  (car d))))))
     (nikki93/cgame-scratch-path . "/Users/nikki/Development/exp/fluxpybird/repl/scratch.js")
     (nikki93/cgame-scratch-path . "/Users/nikki/Library/Application Support/LOVE/pgame/scratch-buf.lua")))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
